// client/src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

function App() {
  const [month, setMonth] = useState(new Date().getMonth() + 1);
  const [transactions, setTransactions] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [perPage] = useState(10);
  const [search, setSearch] = useState('');
  const [statistics, setStatistics] = useState({});
  const [barChartData, setBarChartData] = useState([]);
  const [pieChartData, setPieChartData] = useState([]);

  useEffect(() => {
    fetchTransactions();
  }, [month, currentPage, search]);

  const fetchTransactions = async () => {
    try {
      const response = await axios.get('/api/transactions', {
        params: {
          month,
          page: currentPage,
          perPage,
          search,
        },
      });
      setTransactions(response.data.docs);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchStatistics();
  }, [month]);

  const fetchStatistics = async () => {
    try {
      const response = await axios.get('/api/statistics', {
        params: {
          month,
        },
      });
      setStatistics(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchBarChart();
  }, [month]);

  const fetchBarChart = async () => {
    try {
      const response = await axios.get('/api/bar-chart', {
        params: {
          month,
        },
      });
      setBarChartData(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchPieChart();
  }, [month]);

  const fetchPieChart = async () => {
    try {
      const response = await axios.get('/api/pie-chart', {
        params: {
          month,
        },
      });
      setPieChartData(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleMonthChange = (event) => {
    setMonth(parseInt(event.target.value));
  };

  const handleSearchChange = (event) => {
    setSearch(event.target.value);
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  // Function to generate bar chart
  const generateBarChart = () => {
    if (barChartData.length === 0) {
      return null;
    }

    return (
      <div>
        <h2>Bar Chart</h2>
        <svg width={600} height={400}>
          {barChartData.map((item) => (
            <rect
              key={item._id.priceRange}
              x={
                (barChartData.indexOf(item) * 60) +
                (barChartData.indexOf(item) * 20)
              }
              y={400 - item.count * 4}
              width={60}
              height={item.count * 4}
              fill="skyblue"
            />
          ))}
          {barChartData.map((item, index) => (
            <text
              key={index}
              x={
                (index * 60) +
                (index * 20) +
                60 / 2 -
                item._id.priceRange.length * 2.5
              }
              y={400 + 15}
              textAnchor="middle"
            >
              {item._id.priceRange}
            </text>
          ))}
          <text
            x={300}
            y={400 + 40}
            textAnchor="middle"
            fontSize="16"
          >
            Price Range
          </text>
          <text
            x={0}
            y={20}
            textAnchor="start"
            transform="rotate(-90 0 20)"
            fontSize="16"
          >
            Number of Items
          </text>
        </svg>
      </div>
    );
  };

  // Function to generate pie chart
  const generatePieChart = () => {
    if (pieChartData.length === 0) {
      return null;
    }

    const totalItems = pieChartData.reduce(
      (sum, item) => sum + item.count,
      0
    );

    const pieChartItems = pieChartData.map((item) => ({
      ...item,
      percentage: ((item.count / totalItems) * 100).toFixed(2),
    }));

    return (
      <div>
        <h2>Pie Chart</h2>
        <svg width={400} height={400}>
          {pieChartItems.map((item, index) => {
            const startAngle =
              (index / pieChartItems.length) * Math.PI * 2;
            const endAngle =
              ((index + 1) / pieChartItems.length) * Math.PI * 2;

            const x = 200 + 150 * Math.cos((startAngle + endAngle) / 2);
            const y = 200 + 150 * Math.sin((startAngle + endAngle) / 2);

            return (
              <path
                key={index}
                d={`M 200 200
                A 150 150 0 0 1 ${
                  200 + 150 * Math.cos(endAngle)
                } ${200 + 150 * Math.sin(endAngle)}
                L 200 200`}
                fill={
                  index === 0
                    ? 'skyblue'
                    : index === 1
                    ? 'lightgreen'
                    : 'pink'
                }
                stroke="black"
                strokeWidth={2}
              />
            );
          })}
          {pieChartItems.map((item, index) => {
            const startAngle =
              (index / pieChartItems.length) * Math.PI * 2;
            const endAngle =
              ((index + 1) / pieChartItems.length) * Math.PI * 2;

            const x = 200 + 150 * Math.cos((startAngle + endAngle) / 2);
            const y = 200 + 150 * Math.sin((startAngle + endAngle) / 2);

            return (
              <text
                key={index}
                x={x}
                y={y}
                textAnchor="middle"
                fill="black"
                fontSize="14"
              >
                {item._id}: {item.percentage}%
              </text>
            );
          })}
        </svg>
      </div>
    );
  };

  return (
    <div className="App">
      <h1>MERN Stack Coding Challenge</h1>
      <h2>Transactions Table</h2>
      <div>
        <select value={month} onChange={handleMonthChange}>
          {Array.from({ length: 12 }, (_, i) => i + 1).map((month) => (
            <option key={month} value={month}>
              {new Date(0, month - 1).toLocaleString('default', {
                month: 'long',
              })}
            </option>
          ))}
        </select>
        <input
          type="text"
          placeholder="Search transactions"
          value={search}
          onChange={handleSearchChange}
        />
      </div>
      <table className="transactions-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Description</th>
            <th>Price</th>
            <th>Category</th>
            <th>Sold</th>
            <th>Image</th>
          </tr>
        </thead>
        <tbody>
          {transactions.map((transaction) => (
            <tr key={transaction.id}>
              <td>{transaction.id}</td>
              <td>{transaction.title}</td>
              <td>{transaction.description}</td>
              <td>{transaction.price}</td>
              <td>{transaction.category}</td>
              <td>{transaction.sold ? 'Yes' : 'No'}</td>
              <td>
                <img
                  src={transaction.image}
                  alt={transaction.title}
                  width="50"
                  height="50"
                />
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <div className="pagination">
        <button
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          Previous
        </button>
        <button
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === Math.ceil(transactions.total / perPage)}
        >
          Next
        </button>
        <span>
          Page {currentPage} of{' '}
          {Math.ceil(transactions.total / perPage)}
        </span>
      </div>
      <h2>Transactions Statistics</h2>
      <div className="statistics">
        <h3>
          Statistics -{' '}
          {new Date(0, month - 1).toLocaleString('default', {
            month: 'long',
          })}
        </h3>
        <p>Total Sale: {statistics.totalSale}</p>
        <p>Total Sold Items: {statistics.totalSoldItems}</p>
        <p>Total Not Sold Items: {statistics.totalNotSoldItems}</p>
      </div>
      {generateBarChart()}
      {generatePieChart()}
    </div>
  );
}

export default App;